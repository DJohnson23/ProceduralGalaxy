// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "../Includes/FractalNoise.cginc"

struct GridPoint
{
    float3 position;
    float val;
};

RWStructuredBuffer<GridPoint> gridPoints;

uint pointsPerRow;
float size;
float coreRadius;
float surfaceHeight;
float3 chunkPosition;
float3 localPlanetCenter;

float scale;
float multiplier;
int numLayers;
float lacunarity;
float persistence;

int to1D(int x, int y, int z) {
    return (z * pointsPerRow * pointsPerRow) + (y * pointsPerRow) + x;
}

float CalcPointValue(float3 position) {
    float dist = distance(localPlanetCenter, position);

    if (dist <= coreRadius) {
        return 1;
    }

    float surfaceRadius = coreRadius + surfaceHeight;
    float samplePosition = normalize(position) * coreRadius + localPlanetCenter;

    if (dist <= surfaceRadius) {
        return 0;
        //return simpleNoise(samplePosition, numLayers, scale, persistence, lacunarity, multiplier) * (1 - (dist / surfaceRadius));
    }

    return 0;
}

[numthreads(3,3,3)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= pointsPerRow || id.y >= pointsPerRow || id.z >= pointsPerRow) {
        return;
    }

    float step = size / (pointsPerRow - 1);

    int index = to1D(id.x, id.y, id.z);

    float halfSize = size / 2;
    float3 position = float3(id.x * step - halfSize, id.y * step - halfSize, id.z * step - halfSize);
    float val = CalcPointValue(position);

    GridPoint newPoint;

    newPoint.position = position;
    newPoint.val = val;

    gridPoints[index] = newPoint;
}
